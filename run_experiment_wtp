# -------------------------------------------------------------------------------------------
# Purpose: Running the experiment in different scenarios
#
# Dependencies:
#
# Output:
#
# -------------------------------------------------------------------------------------------

# loading library and dependencies --------------------------
library(future)
library(tidymodels)
library(magrittr)
library(cowplot)
library(tidyverse)
library(furrr)
library(purrr)
library(NNaccess)
library(PostCard)
library(MatchIt)
library(postcard)

db <- NNaccess::nnaccess(project = "students", trial = "ehfd_phd", instance = "current")

source("statprog/within-trial-prog/dpg_wtp.R")
source("statprog/within-trial-prog/experiment.R")
source("statprog/within-trial-prog/estimator.R")
source("statprog/within-trial-prog/discreteSL.R")


# setting up the parallel processing ----------------------------------------
future::plan(multisession, workers = 90)
N <- 250

print("init")
# -------------------------------------------------------------------------------------------
# Performance in different scenarios
# -------------------------------------------------------------------------------------------
#
# Constant treatment effect - no shift

# params = expand_grid(
#   n_hist = c(4000),
#   n_trial = c(200),
#   p = c(7),
#   shift_W1 = c(0), # shift in historical data only
#   shift_U = c(0), # shift in historical data only
#   dgp_string = c("constant")
# )
# results = 1:N %>% future_map( ~ params %>% pmap(experiment), .options = furrr_options(seed = 3021377, scheduling = FALSE))
# results %<>% purrr::list_flatten() %>% purrr::list_rbind()
# 
# db$output_datasets("data_constant_wtp", results, ext = "rds")
# print("constant")
# 
# 
# # Heterogeneous - no shift
# params = expand_grid(
#   n_hist = c(4000),
#   n_trial = c(200),
#   p = c(7),
#   shift_W1 = c(0),
#   shift_U = c(0),
#   dgp_string = c("heterogeneous")
# )
# results = 1:N %>% future_map( ~ params %>% pmap(experiment), .options = furrr_options(seed = 3021377, scheduling = FALSE))
# results %<>% purrr::list_flatten() %>% purrr::list_rbind()
# 
# db$output_datasets("data_het_wtp", results, ext = "rds")
# print("het")
# 
# # Heterogeneous - observable shift in W1 (small and large)
# params = expand_grid(
#   n_hist = c(4000),
#   n_trial = c(200),
#   p = c(7),
#   shift_W1 = c(-3, -5),
#   shift_U = c(0),
#   dgp_string = c("heterogeneous")
# )
# results = 1:N %>% future_map( ~ params %>% pmap(experiment), .options = furrr_options(seed = 3021377, scheduling = FALSE))
# results %<>% purrr::list_flatten() %>% purrr::list_rbind()
# 
# db$output_datasets("data_obs_shift_wtp", results, ext = "rds")
# 
# print("obs_shift")
# 
# # Heterogeneous - unobservable shift in U (small and large)
# params = expand_grid(
#   n_hist = c(4000),
#   n_trial = c(200),
#   p = c(7),
#   shift_W1 = c(0),
#   shift_U = c(.5, 1),
#   dgp_string = c("heterogeneous")
# )
# results = 1:N %>% future_map( ~ params %>% pmap(experiment), .options = furrr_options(seed = 3021377, scheduling = FALSE))
# results %<>% purrr::list_flatten() %>% purrr::list_rbind()
# 
# db$output_datasets("data_unobs_shift_wtp", results, ext = "rds")
# 
# print("unobs_shift")

# # -------------------------------------------------------------------------------------------
# # Performance varying sample size in heterogeneous treatment effect scenario
# # -------------------------------------------------------------------------------------------
#
# varying both historical and trial data size

inc <- c(50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160,
         170, 180, 190, 200, 225, 250, 275, 300, 325, 350, 375, 400)


for (i in 1:length(inc)) {
  params = expand_grid(
    n_hist = inc[i]*10,
    n_trial = inc[i],
    p = c(7),
    shift_W1 = c(0),
    shift_U = c(0),
    dgp_string = c("heterogeneous")
  )
  results = 1:N %>% future_map( ~ params %>% pmap(experiment), .options = furrr_options(seed = 3021377, scheduling = FALSE))
  results %<>% purrr::list_flatten() %>% purrr::list_rbind()

  db$output_datasets(paste0("wtp_data_vary_both_", inc[i]), results, ext = "rds")
}


print("vary_both")

future::plan(sequential)

